apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    def globalConfig = rootProject.ext.android
    compileSdkVersion globalConfig.compileSdkVersion as int
    buildToolsVersion globalConfig.buildToolsVersion as String

    defaultConfig {
        minSdkVersion globalConfig.minSdkVersion as int
        targetSdkVersion globalConfig.targetSdkVersion as int
        versionCode globalConfig.versionCode as int
        versionName globalConfig.versionName as String

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a'//, 'arm64-v8a', 'x86', 'x86_64',
        }
    }

    signingConfigs {
        product_sign {
            keyAlias '123.jks'
            keyPassword '123456'
            storeFile file('../123.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false   //开启混淆
            signingConfig signingConfigs.product_sign
        }
        release {
            minifyEnabled true
//            zipAlignEnabled true  //压缩优化
//            shrinkResources true  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.product_sign
        }
    }
    android.applicationVariants.all { variant ->
        def appName = rootProject.name
        def buildType = variant.buildType.name
        def outputTime = new Date().format("yyyy_MMdd_HHmm", TimeZone.getTimeZone("GMT+08:00"))
        def versionName = variant.versionName
        def versionCode = variant.versionCode
//        if ("release" == buildType) {
//            def outputDirectory = variant.getPackageApplicationProvider().get().outputDirectory
//            variant.getPackageApplicationProvider().get().outputDirectory = new File(outputDirectory, "${versionName}")
//        }
        variant.outputs.each { output ->
            if ("release" == buildType) {
                if (output.outputFileName.endsWith('.apk')) {
                    output.outputFileName = "${appName}_V${versionName}(${versionCode})_${outputTime}.apk"
                }
            } else {
                if (output.outputFileName.endsWith('.apk')) {
                    output.outputFileName = "${appName}_V${versionName}(${versionCode})_debug.apk"
                }
            }
        }
    }
    compileOptions { // JDK版本
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':art')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation(name: 'LiteAVSDK_Player_8.1.9717', ext: 'aar')
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'
    implementation 'com.alibaba:fastjson:1.2.58'
}